<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NNGen</name>
    </assembly>
    <members>
        <member name="T:NNGen.ArraySignal">
            <summary>
            A class to represent an array of signals
            </summary>
        </member>
        <member name="T:NNGen.Signal">
            <summary>
            A class representing an internal signal for a VHDL entity
            </summary>
        </member>
        <member name="M:NNGen.Signal.#ctor(System.String,NNGen.Utilities.VHDLDataType,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a signal
            </summary>
            <param name="_name">The name of the signal</param>
            <param name="_type">The datatype of the signal</param>
            <param name="_defaultValue">The default value for the signal. If not specified, pass 'null'</param>
            <param name="_top">The top integer in the bus width declaration (i.e. the 'X' in (X DOWNTO Y))</param>
            <param name="_bottom">The bottom integer in the bus width declaration (i.e. the 'Y' in (X DOWNTO Y))</param>
        </member>
        <member name="M:NNGen.Signal.VHDLString">
            <summary>
            Returns a string declaring the signal
            </summary>
            <returns>A string declaring the signal</returns>
        </member>
        <member name="M:NNGen.Signal.toPort(NNGen.Port.portDirection)">
            <summary>
            Returns a port with the same parameters of the signal
            </summary>
            <param name="_dir">The direction of the newly created port</param>
            <returns>A port object with the same width, name, and datatype of the current signal</returns>
        </member>
        <member name="P:NNGen.Signal.name">
            <summary>
            The name of the signal
            </summary>
        </member>
        <member name="P:NNGen.Signal.type">
            <summary>
            The datatype of the signal
            </summary>
        </member>
        <member name="P:NNGen.Signal.defaultValue">
            <summary>
            The default value of the signal. If not specified, then it will be null
            </summary>
        </member>
        <member name="P:NNGen.Signal.top">
            <summary>
            The top integer in the bus width declaration (i.e. the 'X' in (X DOWNTO Y))
            </summary>
        </member>
        <member name="P:NNGen.Signal.bottom">
            <summary>
            The bottom integer in the bus width declaration (i.e. the 'Y' in (X DOWNTO Y))
            </summary>
        </member>
        <member name="M:NNGen.ArraySignal.#ctor(NNGen.Signal,System.String,System.Int32,System.Int32)">
            <summary>
            Creates an array of signals (TYPE X IS ARRAY (Y TO Z) OF Q)
            </summary>
            <param name="_baseSignal">The name of the underlying singal (X)</param>
            <param name="_arrayName">The name of the array signal (the name referenced in the SIGNAL statement)</param>
            <param name="_arrayTop">The upper limit of the array (Z)</param>
            <param name="_arrayBottom">The lower limit of the array (Y)</param>
        </member>
        <member name="M:NNGen.ArraySignal.Declare">
            <summary>
            Declares the arry signal type (TYPE)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NNGen.ArraySignal.VHDLString">
            <summary>
            Declares the existance of the signal (SIGNAL)
            </summary>
            <returns></returns>
        </member>
        <member name="P:NNGen.ArraySignal.baseSignal">
            <summary>
            The base signal in the array
            </summary>
        </member>
        <member name="P:NNGen.ArraySignal.arrayTop">
            <summary>
            The uppper bound of the array (the Y in X TO Y)
            </summary>
        </member>
        <member name="P:NNGen.ArraySignal.arrayBottom">
            <summary>
            The bottom bound of the array (tye X in X TO Y)
            </summary>
        </member>
        <member name="P:NNGen.ArraySignal.arraySignalName">
            <summary>
            The name of the array 
            </summary>
        </member>
        <member name="T:NNGen.AsyncNeuralNetwork">
            <summary>
            An abstraction of a neural network entity.
            </summary>
        </member>
        <member name="T:NNGen.Entity">
            <summary>
            An interface for any object that will eventually generate a VHDL entity
            </summary>
        </member>
        <member name="M:NNGen.Entity.getName">
            <summary>
            Returns a string representing the name of the entity
            (i.e. the XXX in the line "ENTITY XXX IS ...")
            </summary>
            <returns>Name of the entity</returns>
        </member>
        <member name="M:NNGen.Entity.getInputPorts">
            <summary>
            Returns an array of Ports representing the inputs to the entity
            </summary>
            <returns>The inputs to the entity</returns>
        </member>
        <member name="M:NNGen.Entity.getOutputPorts">
            <summary>
            Returns an array of Ports representing the outputs of the entity
            </summary>
            <returns>The outputs of the entity</returns>
        </member>
        <member name="M:NNGen.Entity.getInternalSignals">
            <summary>
            Returns an array of singnals representing the internal signals of the entity
            </summary>
            <returns>The internal signals of the entity</returns>
        </member>
        <member name="M:NNGen.Entity.writeVHDL(System.String)">
            <summary>
            Writes the VHDL entity to file.
            </summary>
            <param name="file">The file path to which the entity is to be written</param>
            <returns>True if the file was written successfully, false otherwise.</returns>
        </member>
        <member name="M:NNGen.Entity.writeVHDLIncludes(System.IO.StreamWriter)">
            <summary>
            Writes the "library" and "use" include statements for the project
            </summary>
            <param name="sw">The stream in which to write. Must be open and valid</param>
            <returns>True if the lines were written successfully, false otherwise</returns>
        </member>
        <member name="M:NNGen.Entity.writeVHDLEntity(System.IO.StreamWriter)">
            <summary>
            Writes an entity statement 
            "ENTITY ... IS PORT ( ... ); END ...;
            </summary>
            <param name="sw">The stream in which to write. Must be open and valid</param>
            <returns>True if the lines were written successfully, false otherwise</returns>
        </member>
        <member name="M:NNGen.Entity.writeVHDLComponent(System.IO.StreamWriter)">
            <summary>
            Writes a component statment, used to declare smaller entities within a larger entity
            COMPONENT ... PORT ( ... ); END COMPONENT;
            </summary>
            <param name="sw">The stream in which to write. Must be open and valid</param>
            <returns>True if the lines were written successfully, false otherwise</returns>
        </member>
        <member name="M:NNGen.Entity.writeVHDLPorts(System.IO.StreamWriter)">
            <summary>
            Writes the port statement for a VHDL entity
            PORT ( ... );
            </summary>
            <param name="sw">The stream in which to write. Must be open and valid</param>
            <returns>True if the lines were written successfully, false otherwise</returns>
        </member>
        <member name="M:NNGen.Entity.writeVHDLDependencies(System.IO.StreamWriter,System.Collections.Generic.List{NNGen.Entity})">
            <summary>
            Writes the component statment for each of the entities in dependentEntities
            See writeVHDLComponent()
            </summary>
            <param name="sw">The stream in which to write. Must be open and valid</param>
            <param name="dependentEntities">The entities for which to write the component statements</param>
            <returns>True if the lines were written successfully, false otherwise</returns>
        </member>
        <member name="M:NNGen.Entity.writeVHDLSignals(System.IO.StreamWriter)">
            <summary>
            Writes the internal signals for the entity 
            SIGNAL ...
            </summary>
            <param name="sw">The stream in which to write. Must be open and valid</param>
            <returns>True if the lines were written successfully, false otherwise</returns>
        </member>
        <member name="M:NNGen.Entity.writeArchitectureStatement(System.IO.StreamWriter)">
            <summary>
            Writes the architecture statment for the entity
            ARCHITECTURE ... OF ... IS
            </summary>
            <param name="sw">The stream in which to write. Must be open and valid</param>
            <returns>True if the lines were written successfully, false otherwise</returns>
        </member>
        <member name="M:NNGen.Entity.writeVHDLFooter(System.IO.StreamWriter)">
            <summary>
            Writes the VHDL footer for the entity and flushes the stream
            END ARCHITECTURE;
            </summary>
            <param name="sw">The stream in which to write. Must be open and valid</param>
            <returns>True if the lines were written successfully, false otherwise</returns>
        </member>
        <member name="F:NNGen.AsyncNeuralNetwork.name">
            <summary>
            The entity name
            </summary>
        </member>
        <member name="M:NNGen.AsyncNeuralNetwork.#ctor(System.Int32[],System.Double[],NNGen.AsyncNeuron.NeuronActivationType[],System.Int32,System.Int32,System.Int32,System.Boolean,System.Double[],System.Collections.Generic.List{System.Double})">
            <summary>
            The constructor for a neural network object. Calling this method's write() function will write the entire network.
            </summary>
            <param name="_neuronCounts">The number of neurons in each layer, excluding the bias node.</param>
            <param name="_biasValues">The bias value feeding forward into the next layer. </param>
            <param name="_activationTypes">The activation types for the neurons in each layer</param>
            <param name="_numIntBits">The number of integer bits to use for the inputs for each neuron (Sigmoid activated neurons automatically get this set to zero)</param>
            <param name="_numFracBits">The number of fractional bits to use for the inputs for each neuron</param>
            <param name="_numWeightUpperBits">The number of integer bits used for the weights for each neuron.</param>
            <param name="_isClassifier">If true, a comparitor will be instantiatated at the output to each node, comparing the output layer nodes to the threshold value.</param>
            <param name="_classifierThresholds">The threshold values for the output comparitors</param>
            <param name="_weights">The list of weights read in for the neurons from WeightReader.readWeightsFromFile()</param>
            <remark> For example, to intialize a classification neural network with three inputs, two hidden sigmoid-activated nodes, and one linear output node, use the following line:</remark>
            <remarks> NeuralNetwork nn = new NeuralNetwork([3, 2, 1], [-1, -1], [..SIGMOID_POLY_APPROX, ..LINEAR], 4, 4, 4, true, [0.5], _weights);</remarks>
        </member>
        <member name="M:NNGen.AsyncNeuralNetwork.getName">
            <summary>
            Returns the name of the entity.
            </summary>
            <returns>The name of the entity</returns>
        </member>
        <member name="M:NNGen.AsyncNeuralNetwork.getInputPorts">
            <summary>
            Returns the input ports of the entity.
            </summary>
            <returns>The input ports of the entity</returns>
        </member>
        <member name="M:NNGen.AsyncNeuralNetwork.getOutputPorts">
            <summary>
            Returns the output ports of the entity.
            </summary>
            <returns>The output ports of the entity</returns>
        </member>
        <member name="M:NNGen.AsyncNeuralNetwork.getInternalSignals">
            <summary>
            Returns the internal signals of the entity.
            </summary>
            <returns>The internal signals of the entity</returns>
        </member>
        <member name="M:NNGen.AsyncNeuralNetwork.writeVHDL(System.String)">
            <summary>
            Writes the .vhd files necessary to compile this entity.
            All other necessary entities (i.e. neurons, thresholding functions, etc.) will also be written 
            when this function returns
            </summary>
            <param name="file">The file path in which to write the files (do NOT include "...name.vhd"</param>
            <returns>true if the files were written successfully, false otherwise</returns>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.nnInputPorts">
            <summary>
            The list of input ports to the network 
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.nnOutputPorts">
            <summary>
            The list of output ports to the network
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.ready">
            <summary>
            This signal will go high when the network has been initialized after a reset. 
            It will go low when the device is in reset
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.clk">
            <summary>
            A clock used for synchronous loading of the neuron weights from memory
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.reset">
            <summary>
            An active high reset for the network
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.activationTypes">
            <summary>
            The activation types for each layer of the network. 
            The i-th member corresponds to the activations of the i-th layer of the network
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.neuronCounts">
            <summary>
            The number of neurons in each layer of the network.
            The i-th member corresponds to the i-th layer of the network
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.biasValues">
            <summary>
            The bias values for each layer. 
            The i-th member corresponds to the bias value fed into the i+1-th layer of the network
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.load_sig">
            <summary>
            A signal used to enable a single neuron to accept weights from memory
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.loadVal">
            <summary>
            A signal to hold the values of data coming from memory
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.loadOffset">
            <summary>
            A signal used to index into an individual neuron's weight signals
            Used during the load process
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.addrCounter">
            <summary>
            A signal used to index into memory to obtain the weights during the load process
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.neuron_outputs">
            <summary>
            The signals that will hold the outputs to each individual neuron
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.ready_signal">
            <summary>
            A signal used in determining whether the device has completed the loading process
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.finalLoadSignals">
            <summary>
            A collection of signals to hold the final_load outputs from the individual neurons in the network
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.loadValConv">
            <summary>
            A signal used to convert the output of memory (STD_LOGIC_VECTOR) into the appropriate type 
            to be used in the neuron (SIGNED_FIXED_POINT)
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.classifierThresholds">
            <summary>
            The values to be used for thresholding the output neurons. 
            The i-th member of this array corresponds to the theshold value for the i-th output neuron.
            If the network is not a classification network (i.e. isClassifier = false), then this member is unused.
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.isClassifier">
            <summary>
            If the neural network is to be used for classification, then this variable should be set to true. 
            This will instantiate comparitors on the output neurons. 
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.numIntBits">
            <summary>
            The number of integer bits to be used for the neural network inputs
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.numFracBits">
            <summary>
            The number of fractional bits to be used for the neural network inputs and for the neural network weights
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.numWeightUpperBits">
            <summary>
            The number of integer bits to be used for the neural network weights. 
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.wm">
            <summary>
            A memory entity used to store and load the neural network weights on startup
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.neuronEntities">
            <summary>
            An array of the neurons in the network. It is sequentually loaded, first by layer, then by order within the layer. 
            So, for a net of N layers, each with M neurons in the layer, the array will be 
            [Neuron_0_0, Neuron_0_1, ..., Neuron_0_M, Neuron_1_0, Neuron_1_1, ..., Neuron_N_M]
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.uniqueNeuronEntities">
            <summary>
            A list of the unique neuron entities for which separate VHDL files will need to be generated.
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuralNetwork.intBusWidths">
            <summary>
            The bus widths for each neuron
            </summary>
        </member>
        <member name="T:NNGen.Form1">
            <summary>
            The main user interface form for testing the application
            Not much documentation is provided, as these aren't meant to be public members. They are very straightforward, and can be used as example cod,e however.
            </summary>
        </member>
        <member name="M:NNGen.Form1.#ctor">
            <summary>
            The constructor for the form
            </summary>
        </member>
        <member name="F:NNGen.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NNGen.LayerSetup">
            <summary>
            A pannel for setting up a single layer of the Neural Network
            </summary>
        </member>
        <member name="T:NNGen.NNPanel">
            <summary>
            An abstraction of a single screen (pannel) in the UI
            </summary>
        </member>
        <member name="M:NNGen.NNPanel.#ctor">
            <summary>
            A blank constructor for the pannel
            </summary>
        </member>
        <member name="M:NNGen.NNPanel.resize(System.Int32,System.Int32)">
            <summary>
            Resizes the pannel
            </summary>
            <param name="width">The new width of the pannel</param>
            <param name="height"></param>
        </member>
        <member name="M:NNGen.NNPanel.verify">
            <summary>
            A method used to determine whether the form has had all of its data successfully entered.
            This method should be overridden in child classes to return true if all data has been successfully entered, and false otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NNGen.NNPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.NNPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.NNPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NNGen.LayerSetup.verifiedClassifier">
            <summary>
            A flag determining whether the classification user input has been parsed successfully
            </summary>
        </member>
        <member name="F:NNGen.LayerSetup.validAsyncActivationTypes">
            <summary>
            For an asynchronous network, the valid activation types for the layer
            </summary>
        </member>
        <member name="F:NNGen.LayerSetup.validSyncActivationTypes">
            <summary>
            For a synchronous network, the valid activation types for the layer
            </summary>
        </member>
        <member name="M:NNGen.LayerSetup.#ctor(System.String,System.Boolean,System.Double,System.Int32,System.Boolean,NNGen.AsyncNeuron.NeuronActivationType,NNGen.TransferFunctionWrapper.MemoryActivationType,System.Boolean,System.Boolean)">
            <summary>
            Construct the layer setup form
            </summary>
            <param name="_titleString">The string to display in the title</param>
            <param name="_biasEnabled">The seed value for whether the bias node is enabled for this layer or not</param>
            <param name="_biasValue">The seed value for the bias value for this layer</param>
            <param name="_numNeuron">The seed value for the number of neurons in the layer</param>
            <param name="_thresholdingEnabled">A flag for determing whether thresholding is enabled in this layer</param>
            <param name="_asyncType">For asynchronous networks, the seed value for the activation type. This parameter is ingored for synchronous networks</param>
            <param name="_syncType">For synchronous networks, the seed value for the activation type. This parameter is ignored for the asynchronous networks</param>
            <param name="_isSyncLayer">A flag for setting whether this layer is synchronous or asynchronous</param>
            <param name="_isLastLayer">A flag for setting whether this is the last layer in the network or not</param>
        </member>
        <member name="M:NNGen.LayerSetup.verify">
            <summary>
            The verify() method implementation for this class. See NNPannel.verify() for more documentation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NNGen.LayerSetup.browseForThresholdInputsButton_Click(System.Object,System.EventArgs)">
            <summary>
            Attempts to load the thresholding information from the input textbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:NNGen.LayerSetup.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.LayerSetup.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.LayerSetup.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NNGen.LayerSetup.numNeurons">
            <summary>
            The number of neurons in the layer
            </summary>
        </member>
        <member name="P:NNGen.LayerSetup.biasValue">
            <summary>
            The bias value applied to the layer
            </summary>
        </member>
        <member name="P:NNGen.LayerSetup.biasEnabled">
            <summary>
            A boolean representing whether the layer can have a bias node (disabled for the output layer)
            </summary>
        </member>
        <member name="P:NNGen.LayerSetup.thresholdingEnabled">
            <summary>
            A boolean representing whether thresholding is available for the layer (disabled for the input layer)
            </summary>
        </member>
        <member name="P:NNGen.LayerSetup.isSyncLayer">
            <summary>
            A flag for whether this layer is synchronous
            </summary>
        </member>
        <member name="P:NNGen.LayerSetup.isLastLayer">
            <summary>
            A flag for whether this is the last layer in the network
            </summary>
        </member>
        <member name="P:NNGen.LayerSetup.isClassifier">
            <summary>
            A flag for whether this network should be a classification network as opposed to a regression network
            </summary>
        </member>
        <member name="P:NNGen.LayerSetup.classifierThresholds">
            <summary>
            A structure for holding the thresholds for a classification network. If the network is a regression network, this item will be blank.
            </summary>
        </member>
        <member name="P:NNGen.LayerSetup.asyncActivationType">
            <summary>
            For an asynchronous network, the activation type for the layer
            </summary>
        </member>
        <member name="P:NNGen.LayerSetup.syncActivationType">
            <summary>
            For a synchronous network, the activation type for the layer. 
            </summary>
        </member>
        <member name="T:NNGen.MainForm">
            <summary>
            The main window for the application
            </summary>
        </member>
        <member name="F:NNGen.MainForm.wc">
            <summary>
            The controller to control the UI elements
            </summary>
        </member>
        <member name="M:NNGen.MainForm.#ctor">
            <summary>
            Creates a MainForm
            </summary>
        </member>
        <member name="M:NNGen.MainForm.nextButton_Click(System.Object,System.EventArgs)">
            <summary>
            Advances to the next screen 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NNGen.MainForm.previousButton_Click(System.Object,System.EventArgs)">
            <summary>
            Returns to the previous screen
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NNGen.MainForm.setNextButtonText(NNGen.NNPanel)">
            <summary>
            A method to set the text of the "next" button. 
            On the final screens, we want the text "next ->" to be replaced by "Generate" or "Finish"
            </summary>
            <param name="np"></param>
        </member>
        <member name="M:NNGen.MainForm.MainForm_Resize(System.Object,System.EventArgs)">
            <summary>
            Handles the resizing of the main form
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NNGen.MainForm.visualizeButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the creation of the visualizer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:NNGen.MainForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NNGen.NetworkSetup">
            <summary>
            A screen for setting up the number of layers in the network
            </summary>
        </member>
        <member name="M:NNGen.NetworkSetup.#ctor(System.Int32)">
            <summary>
            Initialize a NetworkSetup pannel
            </summary>
            <param name="_numHiddenLayers">The seed value for the number of hidden layers in the network</param>
        </member>
        <member name="M:NNGen.NetworkSetup.verify">
            <summary>
            The verify() method implementation for this class. See NNPannel.verify() for more documentation.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NNGen.NetworkSetup.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.NetworkSetup.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.NetworkSetup.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NNGen.NetworkSetup.numHiddenLayers">
            <summary>
            The number of hidden layers in the network
            </summary>
        </member>
        <member name="T:NNGen.AsyncNeuron">
            <summary>
            An abstraction of a single neuron within a network
            </summary>
        </member>
        <member name="F:NNGen.AsyncNeuron.sigmoid_poly">
            <summary>
            If this neuron uses the SIGMOID_POLY_APPROX method of thresholding, this member will hold a reference
            to a sigmoid_polyApprox object. Otherwise, it will be null.
            </summary>
        </member>
        <member name="M:NNGen.AsyncNeuron.#ctor(NNGen.Port[],System.Int32,System.Int32,System.Int32,NNGen.AsyncNeuron.NeuronActivationType,System.String)">
            <summary>
            The neuron constructor
            </summary>
            <param name="_inputPorts">An array of input ports to the neuron</param>
            <param name="_numOutputIntBits">The number of integer bits to use on the output</param>
            <param name="_numOutputFracBits">The number of fractional bits to be used on the output</param>
            <param name="_numWeightIntBits">The number of integer bits used to represent the weights</param>
            <param name="_activationType">The thresholding function used to compute the output of the neuron</param>
            <param name="_name">The name of the neuron</param>
        </member>
        <member name="M:NNGen.AsyncNeuron.getName">
            <summary>
            Returns the name of the neuron
            </summary>
            <returns>The name of the neuron</returns>
        </member>
        <member name="M:NNGen.AsyncNeuron.getInputPorts">
            <summary>
            Returns the input ports to the neuron
            </summary>
            <returns>The input ports to the neuron</returns>
        </member>
        <member name="M:NNGen.AsyncNeuron.getOutputPorts">
            <summary>
            Returns the output ports of the neuron
            </summary>
            <returns>The output ports of the neuron</returns>
        </member>
        <member name="M:NNGen.AsyncNeuron.getInternalSignals">
            <summary>
            Returns a list of internal signals for the neuron
            </summary>
            <returns>The internal signals for the neuron</returns>
        </member>
        <member name="M:NNGen.AsyncNeuron.writeVHDL(System.String)">
            <summary>
            Writes the .vhd file that describes the neuron. 
            </summary>
            <param name="file">The root file path for the network. Do not include "(name).vhd" in the filepath</param>
            <returns>True if the file was written successfully, false otherwise</returns>
        </member>
        <member name="M:NNGen.AsyncNeuron.Equals(System.Object)">
            <summary>
            Determines if two neurons are equal
            </summary>
            <param name="obj">Object to compare to this neuron</param>
            <returns>True if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:NNGen.AsyncNeuron.GetHashCode">
            <summary>
            Returns the hash code of the object
            </summary>
            <returns>The hash code of the object</returns>
        </member>
        <member name="P:NNGen.AsyncNeuron.neuronInputs">
            <summary>
            The inputs to the neuron
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.loadClkPort">
            <summary>
            A clock port used for the synchornous loading of the neuron weights
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.loadEnablePort">
            <summary>
            When high, the loading process will be enabled.
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.loadValuePort">
            <summary>
            During weight loading, the value presented on this port will be clocked into one of the weight signals on the rising edge of loadClkPort
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.loadOffsetPort">
            <summary>
            During weight loading, the weight signal pointed to by this signal will be loaded with the value of loadValuePort
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.finalLoadPort">
            <summary>
            This port goes high once the final weight has been loaded
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.neuronOutput">
            <summary>
            The output port from the neuron
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.productSignals">
            <summary>
            The signals used for holding the value of the product (weight_i * input_i)
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.weightSignals">
            <summary>
            The signals used for holding the weights of the network
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.sum">
            <summary>
            The signal used for holding the value of sum(product_i)
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.thresholdedSum">
            <summary>
            The signal used for holding the output of the thresholding function
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.numOutputFracBits">
            <summary>
            The number of fractional bits to maintain on the output of the neuron
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.numOutputIntBits">
            <summary>
            The number of integer bits to maintain on the output of the neuron
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.activationType">
            <summary>
            The thresholding function used for the neuron
            </summary>
        </member>
        <member name="P:NNGen.AsyncNeuron.name">
            <summary>
            The name of this particular neuron
            </summary>
        </member>
        <member name="T:NNGen.AsyncNeuron.NeuronActivationType">
            <summary>
            An enumeration representing the different output activation functions supported by the neuron
            </summary>
        </member>
        <member name="F:NNGen.AsyncNeuron.NeuronActivationType.LINEAR">
            <summary>
            A linear neuron
            </summary>
        </member>
        <member name="F:NNGen.AsyncNeuron.NeuronActivationType.SIGMOID_POLY_APPROX">
            <summary>
            A sigmoid approximation using f(x) ~ (1/2)*(1 + (x/(x+1)) )
            </summary>
        </member>
        <member name="F:NNGen.AsyncNeuron.NeuronActivationType.NONE">
            <summary>
            Represents no activation function, used for input neurons
            </summary>
        </member>
        <member name="T:NNGen.Port">
            <summary>
            A datatype representing a port in an entity
            </summary>
        </member>
        <member name="M:NNGen.Port.#ctor(NNGen.Port.portDirection,System.String,NNGen.Utilities.VHDLDataType,System.Int32,System.Int32)">
            <summary>
            The constructor for a port.
            </summary>
            <param name="_dir">the direction of the port (See portDirection)</param>
            <param name="_name">the VHDL name of the port</param>
            <param name="_type">the VHDL datatype of the port</param>
            <param name="_top">The upper limit for the port (X in X DOWNTO Y)</param>
            <param name="_bottom">The lower limit for the port (Y in X DOWNTO Y)</param>
        </member>
        <member name="M:NNGen.Port.VHDLString(System.Boolean)">
            <summary>
            Returns a string used to declare the port
            Example: 
            CLK: IN STD_LOGIC;
            </summary>
            <param name="isLast">If false, a semicolon will be printed after the end of the signal statement. If true, it will be omitted</param>
            <returns>A string used to declare the port</returns>
        </member>
        <member name="M:NNGen.Port.toSignal(System.String)">
            <summary>
            Returns a signal with the same properties of this port, except for the new name
            </summary>
            <param name="newName">The name of the newly created signal</param>
            <returns>A signal named newName, with the same type and width of the port</returns>
        </member>
        <member name="M:NNGen.Port.rename(System.String)">
            <summary>
            Changes the name of the signal
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:NNGen.Port.setDirection(NNGen.Port.portDirection)">
            <summary>
            Change the direction of the port
            </summary>
            <param name="dir">The new direction of the port</param>
        </member>
        <member name="M:NNGen.Port.copy">
            <summary>
            Copy the definition of the port to another port struct
            </summary>
            <returns>A copy of the current port</returns>
        </member>
        <member name="P:NNGen.Port.direction">
            <summary>
            The direction of this particular port
            </summary>
        </member>
        <member name="P:NNGen.Port.portName">
            <summary>
            The VHDL name of the particular port
            </summary>
        </member>
        <member name="P:NNGen.Port.type">
            <summary>
            The datatype of the particular port (see Utilities.VHDLDataType)
            </summary>
        </member>
        <member name="P:NNGen.Port.top">
            <summary>
            The top number in the (X DOWNTO Y) statement signifying the width of the signal
            </summary>
        </member>
        <member name="P:NNGen.Port.bottom">
            <summary>
            The bottom number in the (X DOWNTO Y) statement signifying the width of the signal
            </summary>
        </member>
        <member name="T:NNGen.Port.portDirection">
            <summary>
            An enumeration representing the directions for the port
            </summary>
        </member>
        <member name="F:NNGen.Port.portDirection.IN">
            <summary>
            Input port
            </summary>
        </member>
        <member name="F:NNGen.Port.portDirection.OUT">
            <summary>
            Output port
            </summary>
        </member>
        <member name="F:NNGen.Port.portDirection.INOUT">
            <summary>
            InOut port
            </summary>
        </member>
        <member name="F:NNGen.Port.portDirection.BUFFER">
            <summary>
            Buffer port
            </summary>
        </member>
        <member name="M:NNGen.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:NNGen.SyncOrAsync">
            <summary>
            A UI element allowing the user to set whether the network is synchronous or asynchronous
            </summary>
        </member>
        <member name="F:NNGen.SyncOrAsync.isSync">
            <summary>
            True if the network is synchronous, false otherwise
            </summary>
        </member>
        <member name="M:NNGen.SyncOrAsync.#ctor">
            <summary>
            Initialize the form
            </summary>
        </member>
        <member name="M:NNGen.SyncOrAsync.verify">
            <summary>
            The verify() method implementation for this class. See NNPannel.verify() for more documentation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NNGen.SyncOrAsync.isSynchronousNetwork">
            <summary>
            Determines whether the user has specified that the network is synchronous or asynchronous
            </summary>
            <returns>True if synchronous, false otherwise</returns>
        </member>
        <member name="M:NNGen.SyncOrAsync.SyncNNRadioButton_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            An event handler that reads the state of the radiobuttons on the form to determine whether the network is synchronous or asynchronous.
            Fires every time the radio buttons change state.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:NNGen.SyncOrAsync.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.SyncOrAsync.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.SyncOrAsync.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NNGen.SaveControl">
            <summary>
            A UI element to allow the user to determine the folder in which the generated files will be saved
            </summary>
        </member>
        <member name="F:NNGen.SaveControl.validFileSelected">
            <summary>
            A flag to determine if a valid file location has been selected
            </summary>
        </member>
        <member name="M:NNGen.SaveControl.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new SaveControl panel
            </summary>
            <param name="_filePath">The seed value for the filePath</param>
            <param name="_valid">The seed value for whether the filePath is valid</param>
        </member>
        <member name="M:NNGen.SaveControl.browseButton_Click(System.Object,System.EventArgs)">
            <summary>
            Opens up a dialog box to allow the user to specify a file location.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NNGen.SaveControl.verify">
            <summary>
            The verify() method implementation for this class. See NNPannel.verify() for more documentation.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NNGen.SaveControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.SaveControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.SaveControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NNGen.SaveControl.filePath">
            <summary>
            The file path in which the files are to be generated
            </summary>
        </member>
        <member name="T:NNGen.Sigmoid_PolyApprox">
            <summary>
            A thresholding function approximating the sigmoid function 1/(1 + exp(-x))
            
            This class uses the approximation 
              sigmoid(x) ~ (1/2) * ( 1 + (x/(x+1)) )
            </summary>
        </member>
        <member name="F:NNGen.Sigmoid_PolyApprox.name">
            <summary>
            The name of the entity
            </summary>
        </member>
        <member name="M:NNGen.Sigmoid_PolyApprox.#ctor(NNGen.Port,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes the Sigmoid thresholding element
            </summary>
            <param name="_sigmoidInputPort">The input port to the device</param>
            <param name="_outputIntBits">The number of integer bits to be used in the output. These will all be zeroes, but this can be useful in matching bus widths in higher level entities</param>
            <param name="_outputFracBits">The number of fractional bits to be used in the output.</param>
            <param name="_name">The name of the entity</param>
        </member>
        <member name="M:NNGen.Sigmoid_PolyApprox.#ctor(NNGen.Signal,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes the Sigmoid thresholding element
            </summary>
            <param name="_sigmoidInputSigmal">The input signal to the device</param>
            <param name="_outputIntBits">The number of integer bits to be used in the output. These will all be zeroes, but this can be useful in matching bus widths in higher level entities</param>
            <param name="_outputFracBits">The number of fractional bits to be used in the output.</param>
            <param name="_name">The name of the entity</param>
        </member>
        <member name="M:NNGen.Sigmoid_PolyApprox.getName">
            <summary>
            Returns the name of the entity
            </summary>
            <returns>The name of the entity</returns>
        </member>
        <member name="M:NNGen.Sigmoid_PolyApprox.getInputPorts">
            <summary>
            Returns the input ports to the device
            </summary>
            <returns>The input ports to the device</returns>
        </member>
        <member name="M:NNGen.Sigmoid_PolyApprox.getOutputPorts">
            <summary>
            Returns the output ports to the device
            </summary>
            <returns>The output ports of the device</returns>
        </member>
        <member name="M:NNGen.Sigmoid_PolyApprox.getInternalSignals">
            <summary>
            Returns the internal signals of the device
            </summary>
            <returns>The internal signals of the device</returns>
        </member>
        <member name="M:NNGen.Sigmoid_PolyApprox.writeVHDL(System.String)">
            <summary>
            Writes the .vhd files necessary to compile this entity.
            All other necessary entities (i.e. neurons, thresholding functions, etc.) will also be written 
            when this function returns
            </summary>
            <param name="file">The file path in which to write the files (do NOT include "...name.vhd"</param>
            <returns>true if the files were written successfully, false otherwise</returns>
        </member>
        <member name="P:NNGen.Sigmoid_PolyApprox.sigmoidInput">
            <summary>
            The input signal to the thresholding function
            </summary>
        </member>
        <member name="P:NNGen.Sigmoid_PolyApprox.sigmoidOutput">
            <summary>
            The output signal to the thresholding function
            </summary>
        </member>
        <member name="P:NNGen.Sigmoid_PolyApprox.numerator">
            <summary>
            An internal signal used in the sigmoid computation
            </summary>
        </member>
        <member name="P:NNGen.Sigmoid_PolyApprox.denominator">
            <summary>
            An internal signal used in the sigmoid computation
            </summary>
        </member>
        <member name="P:NNGen.Sigmoid_PolyApprox.thresh_sum">
            <summary>
            An internal signal used in the sigmoid computation
            </summary>
        </member>
        <member name="P:NNGen.Sigmoid_PolyApprox.outputFracBits">
            <summary>
            The number of bits to use in the output signal representing the fractional portion of the result
            </summary>
        </member>
        <member name="P:NNGen.Sigmoid_PolyApprox.outputIntBits">
            <summary>
            The number of integer bits to use in the output signal.
            These will all be zeros, but this member can be useful to merge signal sizes
            </summary>
        </member>
        <member name="T:NNGen.SyncNeuralNetwork">
            <summary>
            A class representing a synchronous neural network
            </summary>
        </member>
        <member name="F:NNGen.SyncNeuralNetwork.name">
            <summary>
            The entity name
            </summary>
        </member>
        <member name="F:NNGen.SyncNeuralNetwork.neurons">
            <summary>
            An array of neurons to implement in the design. The i-th element corresponds for the neuron object in the i-th row
            </summary>
        </member>
        <member name="M:NNGen.SyncNeuralNetwork.#ctor(System.Int32[],System.Double[],NNGen.TransferFunctionWrapper.MemoryActivationType[],System.Int32,System.Int32,System.Int32,System.Boolean,System.Double[],System.Collections.Generic.List{System.Double})">
            <summary>
            The constructor for a neural network object. Calling this method's write() function will write the entire network.
            </summary>
            <param name="_neuronCounts">The number of neurons in each layer, excluding the bias node.</param>
            <param name="_biasValues">The bias value feeding forward into the next layer. </param>
            <param name="_activationTypes">The activation types for the neurons in each layer</param>
            <param name="_numIntBits">The number of integer bits to use for the inputs for each neuron (Sigmoid activated neurons automatically get this set to zero)</param>
            <param name="_numFracBits">The number of fractional bits to use for the inputs for each neuron</param>
            <param name="_numWeightUpperBits">The number of integer bits used for the weights for each neuron.</param>
            <param name="_isClassifier">If true, a comparitor will be instantiatated at the output to each node, comparing the output layer nodes to the threshold value.</param>
            <param name="_classifierThresholds">The threshold values for the output comparitors</param>
            <param name="_weights">The list of weights read in for the neurons from WeightReader.readWeightsFromFile()</param>
            <remark> For example, to intialize a classification neural network with three inputs, two hidden sigmoid-activated nodes, and one linear output node, use the following line:</remark>
            <remarks> NeuralNetwork nn = new NeuralNetwork([3, 2, 1], [-1, -1], [..SIGMOID_POLY_APPROX, ..LINEAR], 4, 4, 4, true, [0.5], _weights);</remarks>
        </member>
        <member name="M:NNGen.SyncNeuralNetwork.getName">
            <summary>
            Returns the name of the entity.
            </summary>
            <returns>The name of the entity</returns>
        </member>
        <member name="M:NNGen.SyncNeuralNetwork.getInputPorts">
            <summary>
            Returns the input ports of the entity.
            </summary>
            <returns>The input ports of the entity</returns>
        </member>
        <member name="M:NNGen.SyncNeuralNetwork.getOutputPorts">
            <summary>
            Returns the output ports of the entity.
            </summary>
            <returns>The output ports of the entity</returns>
        </member>
        <member name="M:NNGen.SyncNeuralNetwork.getInternalSignals">
            <summary>
            Returns the internal signals of the entity.
            </summary>
            <returns>The internal signals of the entity</returns>
        </member>
        <member name="M:NNGen.SyncNeuralNetwork.writeVHDL(System.String)">
            <summary>
            Writes the .vhd files necessary to compile this entity.
            All other necessary entities (i.e. neurons, thresholding functions, etc.) will also be written 
            when this function returns
            </summary>
            <param name="file">The file path in which to write the files (do NOT include "...name.vhd"</param>
            <returns>true if the files were written successfully, false otherwise</returns>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.nnInputPorts">
            <summary>
            The list of input ports to the network 
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.nnOutputPorts">
            <summary>
            The list of output ports to the network
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.ready">
            <summary>
            This signal will go high when the network has been initialized after a reset. 
            It will go low when the device is in reset
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.clk">
            <summary>
            A clock used for synchronous loading of the neuron weights from memory
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.reset">
            <summary>
            An active high reset for the network
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.activationTypes">
            <summary>
            The activation types for each layer of the network. 
            The i-th member corresponds to the activations of the i-th layer of the network
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.neuronCounts">
            <summary>
            The number of neurons in each layer of the network.
            The i-th member corresponds to the i-th layer of the network
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.biasValues">
            <summary>
            The bias values for each layer. 
            The i-th member corresponds to the bias value fed into the i+1-th layer of the network
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.TransferFunctionWrappers">
            <summary>
            The TransferFunctionWrappers to implement in the final design
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.TransferFunctionMemoriesOutputs">
            <summary>
            A mapping between the output of the neuron layer and the transfer function to use
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.weightMemory">
            <summary>
            A memory instance for the neuron weights
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.input_latched">
            <summary>
            The latches for the inputs to the network. The inputs are sampled once each time the network is run; 
            latching ensures that they remain constant while the network is in operation
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.output_latched">
            <summary>
            The latches for the output to the network. Ensures that the outputs don't fluctuate while the network is computing
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.NeuronOutputs">
            <summary>
            An array of outputs for each of the neurons
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.ThreshNeuronOutputs">
            <summary>
            The output of the neurons after they've been run thorugh the respective thresholding functions
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.CurrentNeuronOutput">
            <summary>
            The current neuron output to feed into the thresholding function
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.CurrentThreshNeuronOutput">
            <summary>
            The current neuron output from the thresholding function
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.internalReady">
            <summary>
            A signal to determine whether the network has been loaded with the weights and is ready to accept inputs
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.WMOut">
            <summary>
            The output of the weight memory
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.LoadVal">
            <summary>
            The value of the output of the weight memory to be loaded into the neuron
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.LoadOff">
            <summary>
            The offset in the neuron's memory at which the memory is to be loaded
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.WMAddr">
            <summary>
            The address from which to read in the weight memory
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.HoldWM">
            <summary>
            When high, pauses the WM clk signal. Needed during the load process to avoid skipping weights
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.WMClk">
            <summary>
            The clock signal for the weight memory.
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.ActivateSig">
            <summary>
            A signal used to determine which neurons are active. When the i-th bit is '1', the i-th layer is computing
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.ClockCount">
            <summary>
            A counter used to compute when the different bits of ActivateSig should be set
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.FinalLoads">
            <summary>
            A signal to hold the FinalLoad signals from the neurons
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.LoadEnables">
            <summary>
            A signal used to enable or disable loading of the weights of a neuron
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.transferFxnOutputs">
            <summary>
            The outputs from the TransferFunctionMemoryWrappers. Eventually multiplexed into CurrentThreshNeuronOutput
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.isClassifier">
            <summary>
            If the neural network is to be used for classification, then this variable should be set to true. 
            This will instantiate comparitors on the output neurons. 
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.numIntBits">
            <summary>
            The number of integer bits to be used for the neural network inputs
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.numFracBits">
            <summary>
            The number of fractional bits to be used for the neural network inputs and for the neural network weights
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.numWeightUpperBits">
            <summary>
            The number of integer bits to be used for the neural network weights. 
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuralNetwork.classifierThresholds">
            <summary>
            The values to be used for thresholding the output neurons. 
            The i-th member of this array corresponds to the theshold value for the i-th output neuron.
            If the network is not a classification network (i.e. isClassifier = false), then this member is unused.
            </summary>
        </member>
        <member name="T:NNGen.SyncNeuron">
            <summary>
            A class representing a singular neuron in a synchronous neural network
            </summary>
        </member>
        <member name="M:NNGen.SyncNeuron.#ctor(NNGen.Port[],System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Create a synchronous neuron
            </summary>
            <param name="_inputPorts">The inputs to the network</param>
            <param name="_numOutputIntBits">The number of output integer bits from the neuron</param>
            <param name="_numOutputFracBits">The number of output fractional bits from the neuron</param>
            <param name="_numWeightIntBits">The number of integer bits to use in the weight signals</param>
            <param name="_name">The name of the neuron</param>
        </member>
        <member name="M:NNGen.SyncNeuron.getName">
            <summary>
            Returns the name of the neuron
            </summary>
            <returns>The name of the neuron</returns>
        </member>
        <member name="M:NNGen.SyncNeuron.getInputPorts">
            <summary>
            Returns the input ports to the neuron
            </summary>
            <returns>The input ports to the neuron</returns>
        </member>
        <member name="M:NNGen.SyncNeuron.getOutputPorts">
            <summary>
            Returns the output ports of the neuron
            </summary>
            <returns>The output ports of the neuron</returns>
        </member>
        <member name="M:NNGen.SyncNeuron.getInternalSignals">
            <summary>
            Returns a list of internal signals for the neuron
            </summary>
            <returns>The internal signals for the neuron</returns>
        </member>
        <member name="M:NNGen.SyncNeuron.writeVHDL(System.String)">
            <summary>
            Writes the .vhd file that describes the neuron. 
            </summary>
            <param name="filePath">The root file path for the network. Do not include "(name).vhd" in the filepath</param>
            <returns>True if the file was written successfully, false otherwise</returns>
        </member>
        <member name="P:NNGen.SyncNeuron.neuronInputs">
            <summary>
            The inputs to the neuron
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.neuronOutput">
            <summary>
            The output to the neuron
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.clk">
            <summary>
            The neuron's clock signal. Used for both loading and computing 
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.Activate">
            <summary>
            When high, the neuron will continue the computation process. When low, it will pause.
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.loadEnable">
            <summary>
            When high, the neuron will continue the weight loading process. When low, it will pause the load process.
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.loadValue">
            <summary>
            The value to load into the weight signal indexed by loadOffset
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.loadOffset">
            <summary>
            The offset at which to load loadValue into the weight signals
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.finalLoad">
            <summary>
            When high, the final weight signal has been loaded
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.weightSignals">
            <summary>
            The weights of each of the individual inputs
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.clockIter">
            <summary>
            A signal used to count the number of clocks that have elapsed
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.currentProduct">
            <summary>
            Holds the current product of a weight and an input
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.currentSum">
            <summary>
            Holds the sum of currentProduct and the cumulative sum of the previous states of currentProduct
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.sum">
            <summary>
            Holds the cumulative sum of the states of currentProduct
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.latchOut">
            <summary>
            A latch so the output doesn't fluctuate while being computed
            </summary>
        </member>
        <member name="P:NNGen.SyncNeuron.name">
            <summary>
            The name of the neuron
            </summary>
        </member>
        <member name="T:NNGen.SyncTransferFunctionMem">
            <summary>
            A synchronous transfer function stored in memory. 
            The transfer function is assumed to be symmetric around x = 0
            </summary>
        </member>
        <member name="F:NNGen.SyncTransferFunctionMem.activationType">
            <summary>
            The transfer function to implement
            </summary>
        </member>
        <member name="M:NNGen.SyncTransferFunctionMem.#ctor(System.Int32,System.Int32,NNGen.TransferFunctionWrapper.MemoryActivationType,System.String)">
            <summary>
            Create a new instance of a memory implementation of a synchronous transfer function
            </summary>
            <param name="_numIntBits">The number of integer bits to use in the implementation</param>
            <param name="_numFracBits">The number of fractional bits to use in the implementation</param>
            <param name="_activationType">The transfer function to implement</param>
            <param name="_name">The name of the memory entity</param>
        </member>
        <member name="M:NNGen.SyncTransferFunctionMem.getName">
            <summary>
            Returns the name of the entity
            </summary>
            <returns>The name of the entity</returns>
        </member>
        <member name="M:NNGen.SyncTransferFunctionMem.getInputPorts">
            <summary>
            Returns the inputs to the device
            </summary>
            <returns>The inputs to the device</returns>
        </member>
        <member name="M:NNGen.SyncTransferFunctionMem.getOutputPorts">
            <summary>
            Returns the outputs to the device
            </summary>
            <returns>The outputs to the device</returns>
        </member>
        <member name="M:NNGen.SyncTransferFunctionMem.getInternalSignals">
            <summary>
            Returns the internal signals for the device
            </summary>
            <returns>The internal signals for the device</returns>
        </member>
        <member name="M:NNGen.SyncTransferFunctionMem.writeVHDL(System.String)">
            <summary>
            Writes the .vhd files necessary to compile this entity.
            All other necessary entities (i.e. neurons, thresholding functions, etc.) will also be written 
            when this function returns
            </summary>
            <param name="file">The file path in which to write the files (do NOT include "...name.vhd"</param>
            <returns>true if the files were written successfully, false otherwise</returns>
        </member>
        <member name="P:NNGen.SyncTransferFunctionMem.addr">
            <summary>
            The address from which to read the memory
            </summary>
        </member>
        <member name="P:NNGen.SyncTransferFunctionMem.clk">
            <summary>
            The clock signal for the memory
            </summary>
        </member>
        <member name="P:NNGen.SyncTransferFunctionMem.data">
            <summary>
            The output of the memory
            </summary>
        </member>
        <member name="P:NNGen.SyncTransferFunctionMem.numIntBits">
            <summary>
            The number of integer bits to use for the memory
            </summary>
        </member>
        <member name="P:NNGen.SyncTransferFunctionMem.numFracBits">
            <summary>
            The number of fractional bits to use for the memory
            </summary>
        </member>
        <member name="P:NNGen.SyncTransferFunctionMem.name">
            <summary>
            The name of the memory instance
            </summary>
        </member>
        <member name="T:NNGen.ThankYou">
            <summary>
            Thanks the user for using the tool :)
            </summary>
        </member>
        <member name="M:NNGen.ThankYou.#ctor">
            <summary>
            Initialize the form
            </summary>
        </member>
        <member name="F:NNGen.ThankYou.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.ThankYou.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.ThankYou.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NNGen.TransferFunctionWrapper">
            <summary>
            Initializes a wrapper for the transfer function memory element.
            As all implemented functions are symmetric around x = 0, we can save memory by only saving the values for x greater than 0 value in memory, and computing the x less than 0 values by (value = 1.0 - abs(x))
            Also, the functions implemented (aside from the Linear node) are very close to 1 or -1 when abs(x) >= 6.0, so when the input is in that range, the output is computed as:
                (out = 1.0 * sgn(x)) (sgn = {1 if x > 0, -1 otherwise})
                (note, for Unipolar Sigmoid, the lower limit is 0, not -1)
            </summary>
        </member>
        <member name="F:NNGen.TransferFunctionWrapper.isLinear">
            <summary>
            Determined whether the transfer function wrapper is of the linear type or a different type. 
            </summary>
        </member>
        <member name="M:NNGen.TransferFunctionWrapper.#ctor(System.Int32,System.Int32,NNGen.TransferFunctionWrapper.MemoryActivationType)">
            <summary>
            Create a TransferFunctionWrapper entity
            </summary>
            <param name="_numIntBits">The number of integer bits to use</param>
            <param name="_numFracBits">The number of fractional bits to use</param>
            <param name="_activationType">The activation type to implement</param>
        </member>
        <member name="M:NNGen.TransferFunctionWrapper.getName">
            <summary>
            Returns the name of the entity
            </summary>
            <returns>The name of the entity</returns>
        </member>
        <member name="M:NNGen.TransferFunctionWrapper.getInputPorts">
            <summary>
            Returns the inputs to the device
            </summary>
            <returns>The inputs to the device</returns>
        </member>
        <member name="M:NNGen.TransferFunctionWrapper.getOutputPorts">
            <summary>
            Returns the outputs to the device
            </summary>
            <returns>The outputs to the device</returns>
        </member>
        <member name="M:NNGen.TransferFunctionWrapper.getInternalSignals">
            <summary>
            Returns the internal signals for the device
            </summary>
            <returns>The internal signals for the device</returns>
        </member>
        <member name="M:NNGen.TransferFunctionWrapper.writeVHDL(System.String)">
            <summary>
            Writes the .vhd files necessary to compile this entity.
            All other necessary entities (i.e. neurons, thresholding functions, etc.) will also be written 
            when this function returns
            </summary>
            <param name="file">The file path in which to write the files (do NOT include "...name.vhd"</param>
            <returns>true if the files were written successfully, false otherwise</returns>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.name">
            <summary>
            The name of the TransferFunctionWrapper entity
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.addr">
            <summary>
            The address requested from memory (i.e. the value of x)
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.clk">
            <summary>
            The clock signal for the memory
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.data">
            <summary>
            The output from the wrapper
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.inverseAddrTemp">
            <summary>
            Used in computing the value (-1 * Addr) 
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.inverseAddr">
            <summary>
            Holds the value (-1 * Addr)
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.memAddr">
            <summary>
            The address from memory to grab
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.memOut">
            <summary>
            The output of the memory
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.memOut_sfixed">
            <summary>
            The output of the memory, cast to sfixed
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.oneMinusMemOut_sfixed">
            <summary>
            Holds the value of 1 - output (used to compute the values when the input is less than 0)
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.outSig">
            <summary>
            The output of the device
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.activationType">
            <summary>
            The memory activation type to implement 
            </summary>
        </member>
        <member name="P:NNGen.TransferFunctionWrapper.sm">
            <summary>
            The memory entity from which to read the transfer function
            </summary>
        </member>
        <member name="T:NNGen.TransferFunctionWrapper.MemoryActivationType">
            <summary>
            The supported memory activation types
            </summary>
        </member>
        <member name="F:NNGen.TransferFunctionWrapper.MemoryActivationType.LINEAR">
            <summary>
            Linear: F(x) = x
            </summary>
        </member>
        <member name="F:NNGen.TransferFunctionWrapper.MemoryActivationType.UNIPOLAR_SIGMOID">
            <summary>
            Unipolar sigmoid: F(x) = 1 / (1 + exp(-x))
            </summary>
        </member>
        <member name="F:NNGen.TransferFunctionWrapper.MemoryActivationType.BIPOLAR_SIGMOID">
            <summary>
            Bipolar sigmoid: F(x) = -1 + (2 / (1 + exp(-x))
            </summary>
        </member>
        <member name="F:NNGen.TransferFunctionWrapper.MemoryActivationType.HYPERBOLIC_TANGENT">
            <summary>
            Hyperbolic Tangent: F(X) = tanh(x)
            </summary>
        </member>
        <member name="T:NNGen.Utilities">
            <summary>
            A collection of useful utilities that don't really fit anywhere else
            </summary>
        </member>
        <member name="M:NNGen.Utilities.getFixedPointRepresentation(System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the most accurate fixed point representation of a number possible in the given number of integer and fractional bits
            The number returned will be in two's complement form, with the most significant bit being the sign bit
            </summary>
            <param name="input">The number to approximate</param>
            <param name="numIntBits">The number of integer bits to use in the representation. If insufficient, an exception is thrown. The sign bit counts as an integer bit</param>
            <param name="numFracBits">The number of fractional bits used in the representation.</param>
            <returns></returns>
        </member>
        <member name="M:NNGen.Utilities.getTwosComplement(System.Int32,System.Int32)">
            <summary>
            Returns the sign extended two's complement representation of a number, extended to 'length' bits
            </summary>
            <param name="input">The number for which to compute the two's complement</param>
            <param name="length">The number of bits to use in the representation</param>
            <returns>The two's complement representation</returns>
        </member>
        <member name="M:NNGen.Utilities.getTwosComplement(System.Int32)">
            <summary>
            Computes the two's complement representation of a number
            </summary>
            <param name="input">The number for which to compute the two's complement representation</param>
            <returns>The two's complement representation of the number</returns>
        </member>
        <member name="M:NNGen.Utilities.getNumSignedBits(System.Int32)">
            <summary>
            Computes the number of bits necessary for a signed two's complement representation of a number
            </summary>
            <param name="baseTenNumber">The number for which to compute the number of bits</param>
            <returns>the number of bits necessary to represent the number in a signed, two's complement manner</returns>
        </member>
        <member name="M:NNGen.Utilities.getNumUnsignedBits(System.Int32)">
            <summary>
            Computes the number of bits necessary for an unsigned two's complement representation of a number
            </summary>
            <param name="baseTenNumber">The number for which to compute the number of bits</param>
            <returns>the number of bits necessary to represent the number in an unsigned, two's complement manner</returns>
        </member>
        <member name="M:NNGen.Utilities.getBusWidth(System.Int32)">
            <summary>
            Computes the number of bits needed to represent a n-digit signed integer in two's complement form
            </summary>
            <param name="baseTenDigits">The number of base 10 digits</param>
            <returns>the number of bits needed for a signed, two's complement representation</returns>
        </member>
        <member name="M:NNGen.Utilities.GetDescription``1(``0)">
            <summary>
            This function retreives the description of an enumeration member
            We are using it as a custom toString() function.
            </summary>
            <remarks> This is adapted from code produced from http://stackoverflow.com/questions/479410/enum-tostring-with-user-friendly-strings </remarks>
            <typeparam name="T">An enum type (VHDLDataType, etc.)</typeparam>
            <param name="enumerationVal">A particular value</param>
            <returns>The description attached to the enum (generally a printable string)</returns>
        </member>
        <member name="T:NNGen.Utilities.VHDLDataType">
            <summary>
            An enumeration representing the different datatypes used in the VHDL file generation
            </summary>
        </member>
        <member name="F:NNGen.Utilities.VHDLDataType.STD_LOGIC_VECTOR">
            <summary>
            STD_LOGIC_VECTOR
            </summary>
        </member>
        <member name="F:NNGen.Utilities.VHDLDataType.STD_LOGIC">
            <summary>
            STD_LOGIC
            </summary>
        </member>
        <member name="F:NNGen.Utilities.VHDLDataType.SIGNED">
            <summary>
            SIGNED
            </summary>
        </member>
        <member name="F:NNGen.Utilities.VHDLDataType.UNSIGNED">
            <summary>
            UNSIGNED
            </summary>
        </member>
        <member name="F:NNGen.Utilities.VHDLDataType.SIGNED_FIXED_POINT">
            <summary>
            Signed Fixed Point
            </summary>
        </member>
        <member name="F:NNGen.Utilities.VHDLDataType.UNSIGNED_FIXED_POINT">
            <summary>
            Unsigned Fixed Point
            </summary>
        </member>
        <member name="F:NNGen.Utilities.VHDLDataType.INTEGER">
            <summary>
            Integer
            </summary>
        </member>
        <member name="T:NNGen.Visualizer">
            <summary>
            A for for visualizing the network that is to be generated by the generator
            </summary>
        </member>
        <member name="F:NNGen.Visualizer.padding">
            <summary>
            An int used to control the padding from the edges for the graphics
            </summary>
        </member>
        <member name="M:NNGen.Visualizer.#ctor(NNGen.WizardController)">
            <summary>
            Create a new Visualizer
            </summary>
            <param name="wc">The WizardController that contains the state of the user's inputs</param>
        </member>
        <member name="F:NNGen.Visualizer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.Visualizer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.Visualizer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NNGen.Visualizer.layers">
            <summary>
            The list of layers that are to be generated by the network
            </summary>
        </member>
        <member name="P:NNGen.Visualizer.arrows">
            <summary>
            The list of arrows connecting the layers
            </summary>
        </member>
        <member name="T:NNGen.VisualizerArrow">
            <summary>
            Represents an arrow in the visualizer diagram
            </summary>
        </member>
        <member name="F:NNGen.VisualizerArrow.labelPadding">
            <summary>
            A variable controlling the formatting 
            </summary>
        </member>
        <member name="F:NNGen.VisualizerArrow.crossBar_HalfWidth">
            <summary>
            A variable controlling the formatting
            </summary>
        </member>
        <member name="M:NNGen.VisualizerArrow.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a VisualizerArrow
            </summary>
            <param name="_maxNumIntBits">The maximal number of integer bits to display</param>
            <param name="_minNumIntBits">The minimal number of integer bits to display</param>
            <param name="_numFracBits">The number of fractional bits to display</param>
            <param name="_numLines">The number of bus lines between the two adjacent layers</param>
        </member>
        <member name="M:NNGen.VisualizerArrow.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the VisualizerArrow on the form
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:NNGen.VisualizerArrow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.VisualizerArrow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.VisualizerArrow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NNGen.VisualizerArrow.maxNumIntBits">
            <summary>
            The maximal number of integer bits for the layer
            </summary>
        </member>
        <member name="P:NNGen.VisualizerArrow.minNumIntBits">
            <summary>
            The minimal number of fractional bits for the layer
            </summary>
        </member>
        <member name="P:NNGen.VisualizerArrow.numFracBits">
            <summary>
            The number of fractional bits for the network
            </summary>
        </member>
        <member name="P:NNGen.VisualizerArrow.numLines">
            <summary>
            The number of bus lines between two layers
            </summary>
        </member>
        <member name="T:NNGen.VisualizerLayer">
            <summary>
            A representation of a layer in the Visualizer
            </summary>
        </member>
        <member name="F:NNGen.VisualizerLayer.label_padding">
            <summary>
            A private formatting variable
            </summary>
        </member>
        <member name="M:NNGen.VisualizerLayer.#ctor(System.Int32,NNGen.AsyncNeuron.NeuronActivationType,NNGen.TransferFunctionWrapper.MemoryActivationType,System.Boolean,System.String,System.Boolean)">
            <summary>
            Create a VisualizerLayer
            </summary>
            <param name="_numNeurons">The number of neurons in the layer</param>
            <param name="_asyncActivationType">For an asynchronous network, the activation type. Ignored for synchronous networks</param>
            <param name="_syncActivationType">For a synchronous network, the activation type. Ignored for asynchronous networks</param>
            <param name="_isSynchronous">A flag determining whether the network is synchronous or not</param>
            <param name="_layerName">The name of the layer</param>
            <param name="_isFirstLayer">A flag representing whether this layer is the first layer in the network. Used to mask the activation type</param>
        </member>
        <member name="M:NNGen.VisualizerLayer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the form
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:NNGen.VisualizerLayer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.VisualizerLayer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.VisualizerLayer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NNGen.VisualizerLayer.numNeurons">
            <summary>
            The number of neurons in the network
            </summary>
        </member>
        <member name="P:NNGen.VisualizerLayer.asyncActivationType">
            <summary>
            For asyncronous networks, the activation type of the layer
            </summary>
        </member>
        <member name="P:NNGen.VisualizerLayer.syncActivationType">
            <summary>
            For syncronous networks, the activatino type of the layer
            </summary>
        </member>
        <member name="P:NNGen.VisualizerLayer.activationType_string">
            <summary>
            A human-readable string representation of the activation type
            </summary>
        </member>
        <member name="P:NNGen.VisualizerLayer.layerName">
            <summary>
            The name of the layer
            </summary>
        </member>
        <member name="P:NNGen.VisualizerLayer.isSynchronous">
            <summary>
            Whether the layer is synchronous
            </summary>
        </member>
        <member name="P:NNGen.VisualizerLayer.isFirstLayer">
            <summary>
            Whether the layer is the first layer in the network
            </summary>
        </member>
        <member name="T:NNGen.WeightMemory">
            <summary>
            An entity that infers memory intended to be used for initializing a neural network
            </summary>
        </member>
        <member name="M:NNGen.WeightMemory.#ctor(System.Int32,System.Int32,System.Collections.Generic.List{System.Double})">
            <summary>
            Initializes the entity
            </summary>
            <param name="_numIntBits">The number of integer bits to be used on the output bus</param>
            <param name="_numFracBits">The number of fractional bits to be used on the output bus</param>
            <param name="_weights">The list of startup weights (see weights_str)</param>
        </member>
        <member name="M:NNGen.WeightMemory.getName">
            <summary>
            Returns the name of the entity
            </summary>
            <returns>The name of the entity</returns>
        </member>
        <member name="M:NNGen.WeightMemory.getInputPorts">
            <summary>
            Returns the inputs to the device
            </summary>
            <returns>The inputs to the device</returns>
        </member>
        <member name="M:NNGen.WeightMemory.getOutputPorts">
            <summary>
            Returns the outputs to the device
            </summary>
            <returns>The outputs to the device</returns>
        </member>
        <member name="M:NNGen.WeightMemory.getInternalSignals">
            <summary>
            Returns the internal signals for the device
            </summary>
            <returns>The internal signals for the device</returns>
        </member>
        <member name="M:NNGen.WeightMemory.writeVHDL(System.String)">
            <summary>
            Writes the .vhd files necessary to compile this entity.
            All other necessary entities (i.e. neurons, thresholding functions, etc.) will also be written 
            when this function returns
            </summary>
            <param name="file">The file path in which to write the files (do NOT include "...name.vhd"</param>
            <returns>true if the files were written successfully, false otherwise</returns>
        </member>
        <member name="P:NNGen.WeightMemory.clk">
            <summary>
            The clock signal. The memory device output is rising-edge registered 
            </summary>
        </member>
        <member name="P:NNGen.WeightMemory.addr">
            <summary>
            The address lines for the memory
            </summary>
        </member>
        <member name="P:NNGen.WeightMemory.data">
            <summary>
            Memory output. On rising edge, the contents of memory pointed to by "addr" will appear on "q"
            </summary>
        </member>
        <member name="P:NNGen.WeightMemory.weights_str">
            <summary>
            The initialization values for the memory. the i-th element will appear in the i-th address on startup.
            </summary>
        </member>
        <member name="P:NNGen.WeightMemory.name">
            <summary>
            The name of the entity
            </summary>
        </member>
        <member name="T:NNGen.WeightsAndPrecision">
            <summary>
            A UI element to allow the user to specify the location for the weights to input to the network, as well as the precision with which to perform the neuron's computations.
            </summary>
        </member>
        <member name="M:NNGen.WeightsAndPrecision.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initialize a WeightsAndPrecision form
            </summary>
            <param name="_numWeightsExpected">The seed value for the number of weights expected for the network</param>
            <param name="_maxIntBits">The seed value for the maximal number of integer bits used in the computation</param>
            <param name="_maxFracBits">The seed value for the maximal number of fractional bits used in the computation</param>
            <param name="_filePath">The seed value for the filepath from which to read the weights</param>
        </member>
        <member name="M:NNGen.WeightsAndPrecision.browseButton_Click(System.Object,System.EventArgs)">
            <summary>
            Opens a window to allow the user to browse for the file containing the weights
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NNGen.WeightsAndPrecision.verify">
            <summary>
            The verify() method implementation for this class. See NNPannel.verify() for more documentation.
            </summary>
            <returns></returns> 
        </member>
        <member name="F:NNGen.WeightsAndPrecision.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.WeightsAndPrecision.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.WeightsAndPrecision.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NNGen.WeightsAndPrecision.filePath">
            <summary>
            The file path from which to load the weights
            </summary>
        </member>
        <member name="P:NNGen.WeightsAndPrecision.weights">
            <summary>
            The weights read from the user-specified input file
            </summary>
        </member>
        <member name="P:NNGen.WeightsAndPrecision.maxIntBits">
            <summary>
            The number of integer bits to use in the computations
            </summary>
        </member>
        <member name="P:NNGen.WeightsAndPrecision.maxFracBits">
            <summary>
            The number of fractional bits to use in the computation
            </summary>
        </member>
        <member name="P:NNGen.WeightsAndPrecision.validFileSelected">
            <summary>
            A flag to determine whether a valid file has been selected by the user
            </summary>
        </member>
        <member name="P:NNGen.WeightsAndPrecision.numWeightsExpected">
            <summary>
            The number of weights needed to fully initialize the network.
            </summary>
        </member>
        <member name="T:NNGen.Welcome">
            <summary>
            A form displaying the welcome message to the user
            </summary>
        </member>
        <member name="F:NNGen.Welcome.welcomeLabelStartingX">
            <summary>
            Formatting variable
            </summary>
        </member>
        <member name="F:NNGen.Welcome.welcomeLabelStartingY">
            <summary>
            Formatting variable
            </summary>
        </member>
        <member name="F:NNGen.Welcome.welcomeTextYSpacing">
            <summary>
            Formatting variable
            </summary>
        </member>
        <member name="M:NNGen.Welcome.#ctor">
            <summary>
            Initialize the Welcome form
            </summary>
        </member>
        <member name="M:NNGen.Welcome.Welcome_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles resizing the form
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:NNGen.Welcome.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NNGen.Welcome.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NNGen.Welcome.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NNGen.PanelContainer">
            <summary>
            A container for holding the list of panels to show the user
            </summary>
        </member>
        <member name="M:NNGen.PanelContainer.#ctor(System.Collections.Generic.List{NNGen.NNPanel})">
            <summary>
            Create a PanelContainer
            </summary>
            <param name="_panels">The list of panels to be shown to the user</param>
        </member>
        <member name="M:NNGen.PanelContainer.advance(System.Int32,System.Int32)">
            <summary>
            Attempt to advance to the next panel. 
            If the current panel has had all of its data entered correctly, then this method returns the next form resized to (width, height)
            If there is an error, the current panel will be returned 
            </summary>
            <param name="width">The width of the panel to return</param>
            <param name="height">The height of the panel to return</param>
            <returns>The next panel in the list, or the current panel</returns>
        </member>
        <member name="M:NNGen.PanelContainer.previous(System.Int32,System.Int32)">
            <summary>
            Safely returns the previous panel in the list resized to (Width, Height)
            If this method is called on the first panel in the list, then the first panel is returned.
            </summary>
            <param name="width">The width of the panel to return</param>
            <param name="height">The height of the panel to return</param>
            <returns>The previous panel in the list, or the first panel</returns>
        </member>
        <member name="M:NNGen.PanelContainer.current(System.Int32,System.Int32)">
            <summary>
            Return the current panel, resized to (Width, Height)
            </summary>
            <param name="width">The width of the panel to return</param>
            <param name="height">The height of the panel to return</param>
            <returns>The current panel</returns>
        </member>
        <member name="M:NNGen.PanelContainer.current">
            <summary>
            Return the current panel without resizing
            </summary>
            <returns>The current panel</returns>
        </member>
        <member name="M:NNGen.PanelContainer.clearToEnd(System.Int32)">
            <summary>
            Removes all panels from the list with an index greater than or equal to (index)
            </summary>
            <param name="index">The starting index to remove</param>
        </member>
        <member name="M:NNGen.PanelContainer.isEnd">
            <summary>
            Returns whether the cursor index is at the end of the list
            </summary>
            <returns>True if the cursor is at the end of the list</returns>
        </member>
        <member name="P:NNGen.PanelContainer.panels">
            <summary>
            The list of panels to be shown to the user
            </summary>
        </member>
        <member name="P:NNGen.PanelContainer.currentPanelIndex">
            <summary>
            The index of the current panel being shown
            </summary>
        </member>
        <member name="T:NNGen.WizardController">
            <summary>
            A class managing the UI forms to show the user, as well as recording their responses
            </summary>
        </member>
        <member name="F:NNGen.WizardController.DEFAULT_HIDDEN_LAYERS">
            <summary>
            The default value for the number of hidden layers
            </summary>
        </member>
        <member name="F:NNGen.WizardController.saveControl_Persistant_Path">
            <summary>
            A value to hold the path entered in the SaveControl form
            </summary>
        </member>
        <member name="F:NNGen.WizardController.saveControl_Valid">
            <summary>
            The flag for determining whether a valid path has been entered in the SaveControl
            </summary>
        </member>
        <member name="M:NNGen.WizardController.#ctor">
            <summary>
            Create a new wizard controller
            </summary>
        </member>
        <member name="M:NNGen.WizardController.next(System.Int32,System.Int32)">
            <summary>
            Get the next screen to show the user
            </summary>
            <param name="width">The width at which to display the form</param>
            <param name="height">The height at which to display the form</param>
            <returns></returns>
        </member>
        <member name="M:NNGen.WizardController.previous(System.Int32,System.Int32)">
            <summary>
            Get the previous screen to display to the user
            </summary>
            <param name="width">The width at which to display the screen</param>
            <param name="height">The height at which to display the screen</param>
            <returns></returns>
        </member>
        <member name="M:NNGen.WizardController.current(System.Int32,System.Int32)">
            <summary>
            Get the current screen
            </summary>
            <param name="width">The width at which to display the screen</param>
            <param name="height">The height at which to display the screen</param>
            <returns></returns>
        </member>
        <member name="M:NNGen.WizardController.initNN">
            <summary>
            Creates the neural network object from the user's inputted data
            </summary>
        </member>
        <member name="M:NNGen.WizardController.generateNN(System.String)">
            <summary>
            Writes the neural network files to disk
            </summary>
            <param name="filepath">The path at which to write the data</param>
            <returns></returns>
        </member>
        <member name="P:NNGen.WizardController.pc">
            <summary>
            The container for the panels to show the user
            </summary>
        </member>
        <member name="P:NNGen.WizardController.neuronCounts">
            <summary>
            An array holding the number of neurons for the network. The i-th row represents the i-th layer
            </summary>
        </member>
        <member name="P:NNGen.WizardController.biasValues">
            <summary>
            An array holding the bias values for the networks. The i-th row represents the bias value feeding into the i+1-th layer
            </summary>
        </member>
        <member name="P:NNGen.WizardController.asyncActivationTypes">
            <summary>
            For asynchronous networks, the activation type of each layer. For synchronous networks, this variable is ignored
            </summary>
        </member>
        <member name="P:NNGen.WizardController.syncActivationTypes">
            <summary>
            For synchronous networks, the activation types of each layer. For asynchronous netowrks, this variable is ignored
            </summary>
        </member>
        <member name="P:NNGen.WizardController.numIntBits">
            <summary>
            The number of integer bits to use in the creation of the neurons
            </summary>
        </member>
        <member name="P:NNGen.WizardController.numFracBits">
            <summary>
            The number of fractional bits to use in the creation of the neurons
            </summary>
        </member>
        <member name="P:NNGen.WizardController.numWeightIntBits">
            <summary>
            Then number of integer bits to use in the creation of the weight memory
            </summary>
        </member>
        <member name="P:NNGen.WizardController.isClassifier">
            <summary>
            A flag to save whether the network is a classification network or not. 
            </summary>
        </member>
        <member name="P:NNGen.WizardController.isSynchronousNetwork">
            <summary>
            A flag to represent whether the network being created is synchronous or not
            </summary>
        </member>
        <member name="P:NNGen.WizardController.classifierThresholds">
            <summary>
            The classifier thresholds for a classification network. For a regression network, these are null.
            </summary>
        </member>
        <member name="P:NNGen.WizardController.weights">
            <summary>
            The list of neuron input weights
            </summary>
        </member>
        <member name="P:NNGen.WizardController.asyncNN">
            <summary>
            The asynchronous network object to be created. This variable is ignored for synchronous networks
            </summary>
        </member>
        <member name="P:NNGen.WizardController.syncNN">
            <summary>
            The synchronous network object to be created. This variable is ignored for asynchronous networks
            </summary>
        </member>
        <member name="T:NNGen.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NNGen.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NNGen.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
