LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE work.fixed_pkg.all;

ENTITY TFWrap_Mem_UNIPOLAR_SIGMIOD IS
PORT
(
	clk : IN STD_LOGIC;
	addr : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
	data : OUT STD_LOGIC_VECTOR(8 DOWNTO 0)
);
END TFWrap_Mem_UNIPOLAR_SIGMIOD;

ARCHITECTURE behavorial OF TFWrap_Mem_UNIPOLAR_SIGMIOD IS 

	type RAM_TYPE_TFWrap_Mem_UNIPOLAR_SIGMIOD is array (0 to 255) of std_logic_vector(8 downto 0);

	constant MEM_INIT_TFWrap_Mem_UNIPOLAR_SIGMIOD : RAM_TYPE_TFWrap_Mem_UNIPOLAR_SIGMIOD := 
	(
		"000001000",
		"000000111",
		"000000111",
		"000000111",
		"000000111",
		"000000110",
		"000000110",
		"000000110",
		"000000110",
		"000000101",
		"000000101",
		"000000101",
		"000000101",
		"000000100",
		"000000100",
		"000000100",
		"000000100",
		"000000100",
		"000000011",
		"000000011",
		"000000011",
		"000000011",
		"000000011",
		"000000011",
		"000000010",
		"000000010",
		"000000010",
		"000000010",
		"000000010",
		"000000010",
		"000000010",
		"000000010",
		"000000001",
		"000000001",
		"000000001",
		"000000001",
		"000000001",
		"000000001",
		"000000001",
		"000000001",
		"000000001",
		"000000001",
		"000000001",
		"000000001",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000",
		"000000000"
	);

	SIGNAL ram : RAM_TYPE_TFWrap_Mem_UNIPOLAR_SIGMIOD := MEM_INIT_TFWrap_Mem_UNIPOLAR_SIGMIOD;

BEGIN

	process(clk)
	begin
		if (rising_edge(clk)) then
			data <= ram(to_integer(unsigned(addr)));
		end if;
	end process;
END ARCHITECTURE;
