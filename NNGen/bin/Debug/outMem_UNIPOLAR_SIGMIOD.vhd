LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE work.fixed_pkg.all;

ENTITY Mem_UNIPOLAR_SIGMIOD IS
PORT
(
	clk : IN STD_LOGIC;
	addr : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
	data : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
);
END Mem_UNIPOLAR_SIGMIOD;

ARCHITECTURE behavorial OF Mem_UNIPOLAR_SIGMIOD IS 

	type RAM_TYPE_Mem_UNIPOLAR_SIGMIOD is array (0 to 255) of std_logic_vector(7 downto 0);

	constant MEM_INIT_Mem_UNIPOLAR_SIGMIOD : RAM_TYPE_Mem_UNIPOLAR_SIGMIOD := 
	(
		"00001000",
		"00000111",
		"00000111",
		"00000111",
		"00000111",
		"00000110",
		"00000110",
		"00000110",
		"00000110",
		"00000101",
		"00000101",
		"00000101",
		"00000101",
		"00000100",
		"00000100",
		"00000100",
		"00000100",
		"00000100",
		"00000011",
		"00000011",
		"00000011",
		"00000011",
		"00000011",
		"00000011",
		"00000010",
		"00000010",
		"00000010",
		"00000010",
		"00000010",
		"00000010",
		"00000010",
		"00000010",
		"00000001",
		"00000001",
		"00000001",
		"00000001",
		"00000001",
		"00000001",
		"00000001",
		"00000001",
		"00000001",
		"00000001",
		"00000001",
		"00000001",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00000000",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001111",
		"00001110",
		"00001110",
		"00001110",
		"00001110",
		"00001110",
		"00001110",
		"00001110",
		"00001110",
		"00001110",
		"00001110",
		"00001110",
		"00001110",
		"00001101",
		"00001101",
		"00001101",
		"00001101",
		"00001101",
		"00001101",
		"00001101",
		"00001101",
		"00001100",
		"00001100",
		"00001100",
		"00001100",
		"00001100",
		"00001100",
		"00001011",
		"00001011",
		"00001011",
		"00001011",
		"00001011",
		"00001010",
		"00001010",
		"00001010",
		"00001010",
		"00001001",
		"00001001",
		"00001001",
		"00001001",
		"00001000",
		"00001000",
		"00001000",
		"00001000"
	);

	SIGNAL ram = RAM_TYPE_Mem_UNIPOLAR_SIGMIOD := MEM_INIT_Mem_UNIPOLAR_SIGMIOD;

BEGIN

	process(clk)
	begin
		if (rising_edge(clk)) then
			data <= ram(to_integer(unsigned(addr)));
		end if;
	end process;
END ARCHITECTURE;
